Revision -28/7


//////////////////////////////////////call////////////////////////////////////////////// 
- This method directly invokes a function which it is called on. It will be helpful in function borrowing. It takes first argument as what it is referening to (i.e.,Object/function) and remaining all are arguments

const name = {
    firstname:"kranthi",
    lastname:"Reddy"
}

function printName(hometown,city,country){
    console.log(`${this.firstname} ${this.lastname} from ${hometown} in ${city} of ${country}`);
}

printName.call(name,"vallur","Jogulamba Gadwal","India");

//Polyfill for call method
Function.prototype.mycall = function(context,...args){
  let currContext = context || globalThis;
  //Symbol() ensures that new method created will not override the existing methods.
  let newProp = Symbol();
  currContext[newProp]=this;
  let result = currContext[newProp](...args);
  delete currContext[newProp];
  return result;
  
}

printName.mycall(name,"vallur","Jogulamba Gadwal","India");



//////////////////////////////////////////Apply/////////////////////////////////
 - This method also directly invoke a function which it is applied on. This is also helpful in function borrowing. It takes first argument as what it is referenced to (Ex:Object/function) and remaining arguments in the form of array.

const name2 = {
    firstname:"kranthi",
    lastname:"Reddy"
}

function printName(hometown,city,country){
    console.log(`${this.firstname} ${this.lastname} from ${hometown} in ${city} of ${country}`);
}

printName.apply(name2,["vallur","Jogulamba Gadwal","India"]);

//Polyfill for Apply function
Function.prototype.myApply = function(context,args=[]){
  if(!Array.isArray(args)){
    throw new Error("Remainder, Apply takes arguments in the form of Array");
  }
  let currContext = context || globalThis;
  let newProp = Symbol();
  currContext[newProp]=this;
  let result = currContext[newProp](...args);
  delete currContext[newProp];
  return result;
}

printName.myApply(name2,["vallur","Jogulamba Gadwal","India"]);

///////////////////////////////////////////Bind////////////////////////////////////////// 
-- This method will return the copy of exact function on which it is invoked on and we can use of this return function in later stage whenever required.
// This bind is same like call method but it will not be invoked directly.
const name3 = {
  firstname:"kranthi",
  lastname:"reddy"
}

function printName(hometown,city,country){
    console.log(`${this.firstname} ${this.lastname} from ${hometown} in ${city} of ${country}`);
}

let fullName = printName.bind(name3,"vallur","Jogulamba Gadwal");
fullName("India");

//Polyfill for bind
Function.prototype.myBind = function(context,...innerargs){
  let currContext = context || globalThis;
  let newProp = Symbol();
  //Here we are keeping new Prop inside context(i.e. name3 Object) and then assigning it with PrintName function. That means we are pushing printName function inside name3 Object and later we invoke it
  currContext[newProp]=this;
  return function(...outerargs){
    let result = currContext[newProp](...innerargs,...outerargs);
    delete currContext[newProp];
    return result;
  }
}

let fullName2 = printName.myBind(name3,"vallur","Jogulamba Gadwal");
fullName2("India");


/////////////////////////////////////<meta> tag in HTML://///////////////////////////////////////////////////////////////

<meta> tag defines the metadata of HTML document. Metadata is data(information) about data. Meta tag always go inside <head> element, and are typically used to specify character set, page description,keywords, author of the document,and viewport settings.
Metadata will not be displayed on page but is machine parsable.
Metadata is used by Browsers(how to display content or reload page), Search Engines(keywords) and other webservices

char_set -- specifies the character Encoding for HTML document
<meta charset="UTF-8">

content attribute -- It takes "text" value. It specifies the value associated with http-equiv or name attribute.
<meta http-equiv="X-UA-Compatible" content="IE=edge">

http-equiv attribute --- It takes the values such as content-security-policy/content-type/default-style/refresh. It Provides the HTTP-header for the information or a value of the content attribute.
//X-UA-Compatible meta tag allows web authors to choose what version of Internet Explorer the page should render.
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="refresh" content="30">
name attribute: It takes the values such as application-name/author/description/generator/keywords/viewport. It specifies the name for the metadata.
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="keywords" content="HTML, CSS, JavaScript">
<meta name="description" content="Free Web tutorials for HTML and CSS">

///////////////////////////////////////////DEBOUNCING///////////////////////////////////////////////////////////////////////
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Debouncing</title>
</head>
<body>
<div style="display:grid;place-items:center;min-height:50vh">
<div>
<label for="normalSearch">Normal Search</label>
<!-- <input> is an empty tag, in that it's not designed to have any content or a closing tag. For compliance, you can signify the end of the tag by using it like this: -->
<input id="normalSearch" type="text" onkeyup="normalFunction()" />
</div>
<div>
<label for="debouncedSearch">Debounce Search</label>
<input id="debouncedSearch" type="text" onkeyup="debounceFunction() />
</div>
</div>

<script>
let normalCount = 0;
let debounceCount = 0;
const normalFunction = () => {

}
const searchData = () => {
debounceCount++;
console.log("fetch Data",debounceCount);
}

function debounce(fn,d){
let timer;
return function(){
let context=this, params=arguments;
clearTimeout(timer);
timer = setTimeout(()=>{
searchData.apply(context,params);
},d);
}
}

const normalFunction = () => {
normalCount++;
console.log("normal Function called",normalCount);
}

const debounceFunction = debounce(searchData,3000);

</script>
</body>
</html>



