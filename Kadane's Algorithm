// kadane's Algorithm

const arr=[-2,1,-3,4,-1,2,1,-5,4];
console.log(maxSubArr(arr));


// Maximum sum of sub array in a array

const arr=[-2,1,-3,4,-1,2,1,-5,4];
console.log(maxSubArr(arr));

function maxSubArr(nums){
    let maxSum=nums[0];
    let startIdx=0;
    let endIdx=0;
    for(let i=0;i<nums.length;i++){
        let curSum=0;
        for(let j=i;j<nums.length;j++){
           curSum+=nums[j];
           if(curSum>maxSum){
               maxSum=curSum;
               startIdx=i;
               endIdx=j;
           }
        }
    }
    return {max: maxSum,subArr:nums.slice(startIdx,endIdx+1)};
}

-------------------------------------------------------------------------------------------------
Optimized Solution:   

// sum=0
//max=0
//if(sum>max){max=sum}
//if(sum<0) sum=0
function maxSubArr(arr){
    let sum=0;
    let max=arr[0];
    for(let i=0;i<arr.length;i++){
        sum+=arr[i];
        if(sum>max){
            max=sum;
        }
        if(sum<0){
            sum=0;
        }
    }
    return max;
}
