Daily Coding:

Day 4:

//Generate Finonacci sequence

function generateFibonacci(arr,n){
    let fibonacciSeries=arr;
   for(let i=2;i<n;i++){
       let nextFibonacci=fibonacciSeries[i-2]+fibonacciSeries[i-1];
       fibonacciSeries.push(nextFibonacci);
   }
   return fibonacciSeries;
}

console.log(generateFibonacci([10,20],8));

--------------------------------------------------------------------------------------

//Two sum

function twoSum(a,t){
    let finalArr=[];
    for(let i=0;i<a.length;i++){
        for(let j=i+1;j<a.length;j++){
            if(a[i]+a[j]===t){
                finalArr.push([i,j]);
            }
        }
    }
    return finalArr;
}
const arr=[3,2,4];//[2,7,11,15]---target-9
const target=6;
//Output: [0,1]----> Indexes Array
console.log(twoSum(arr,target));


Approach 2:

function twoSum(arr, target) {
  let obj = {};

  for (let i = 0; i < arr.length; i++) {
    if (target - arr[i] in obj) {
       return [obj[target-arr[i]], i];
    } else {
      obj[arr[i]] = i;
    }
  }
  return [];
};

twoSum([7,11,15,2], 15);


----------------------------------------------------------------------------
// Balanced paranthesis
console.log(matchingParenthesis("{(Ebere) [Njoku](Samson)}"));

function matchingParenthesis(str){
   // Remove the characters in a string and keep only special characters
   let paranthesis="[{()}]";
  let openParams=["[","{","("];
  let closeParams=["]","}",")"];
  let stack=[];
  //Keep only paranthesis
 let filteredStr=str.split("").filter(e=>[...paranthesis].includes(e));
  
  
  //Push the open Paranthesis inside a stack
  // If we encounter any close Paranthesis , then get the last index element of the stack
  //Check for index of last stack element in open Params array and compare it with element in closeParams
 for(let i of filteredStr){
     if(openParams.includes(i)){
         stack.push(i);
     }else{
         let lastElem=stack[stack.length-1];
         if(closeParams.indexOf(i)===openParams.indexOf(lastElem)){
             stack.pop(lastElem);
         }else {
              return "closing brace does not match opening brace";
            }
     }
    
 }
 if (stack.length !== 0) return "braces do not match";
        return "All openning brace has a closing brace to match";
}


----------------------------------------------------------------
Day 9: How Many Numbers Are Smaller Than the Current Number 

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).

nums = [8,1,2,2,3];
console.log(smallerNumThanCurrent(nums));
function smallerNumThanCurrent(nums){
    let countArr=[];
  for(let i=0;i<nums.length;i++){
       let count=0;
      for(let j=0;j<nums.length;j++){
          if(nums[j]<nums[i]){
              count++;
          }
      }
      countArr.push(count);
  }  
  return countArr;
}



-----------------------------------------------------------------------------------

//Split Strings by Separator

// Example 1:

// Input: words = ["one.two.three","four.five","six"], separator = "."
// Output: ["one","two","three","four","five","six"]

const  words = ["one.two.three","four.five","six"], separator = ".";
console.log(threeSumClosest(words, separator));
function threeSumClosest(words, separator){
   console.log(words.join(separator).split(separator).filter(Boolean));
}

//array.filter(Boolean)--- Filters the falsy values and returns the array but it does not mutate the original array.

-----------------------------------------------------------------------------

Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.
 

Example 1:

Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
Output: [3,4]
Explanation: 
The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].
Example 2:

Input: nums = [[1,2,3],[4,5,6]]
Output: []
Explanation: 
There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].

Unoptimized solution:
var intersection = function(nums) {
     let newArr=nums.flat(Infinity);
    let obj={};
   for(let i of newArr){
       if(obj.hasOwnProperty(i)){
           obj[i]++;
       } else{
           obj[i]=1;
       }
   }
   let finalArr=[];
   for(let [key,value] of Object.entries(obj)){
       if(value===nums.length){
          finalArr.push(+key); 
       }
   }
   return finalArr.length>0?finalArr:[];
};

Optimized Solution:
const nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]];
intersection(nums);
function intersection(nums){
   let ref=[...nums[0]];
   for(let i=1;i<nums.length;i++){
       ref=ref.filter(n=>nums[i].includes(n));
   }
   console.log(ref);
}

--------------------------------------------------------------------------------
// Grouping Anagrams
console.log(groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"]));
/*
  [ [ 'ate', 'eat', 'tea' ], [ 'nat', 'tan' ], [ 'bat' ] ]
*/

function groupAnagrams(arr){
    //First we need to sort and get all elements 
  let rearranged=arr.map(e=>{
      return [...e].sort().join('');
  });
  
  let uniqueArr=[...new Set(rearranged)];

// We need to compare array elements with uniqueArr elements by sorting and joining them
let finalArr=[];
uniqueArr.forEach((word)=>{
    let chunk=arr.filter((char)=>{
        return word===[...char].sort().join('');
    })
    finalArr.push(chunk.sort());
})
return finalArr;
}


-----------------------------------------------------------------------------
// reverse a number

const num=-123;
reverseNum(num);
function reverseNum(n){
    let arr=[];
    let positiveNum=Math.abs(n);
    while(positiveNum>0){
        arr.push(positiveNum%10);
        positiveNum=Math.floor(positiveNum/10);
    }
    console.log(arr.join('')*Math.sign(n));
}

-------------------------------------------------------------------------------------
Dulicates Zeros

Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

// Input: arr = [1,0,2,3,0,4,5,0]
// Output: [1,0,0,2,3,0,0,4]
const arr = [1,0,2,3,0,4,5,0];
duplicateZeros(arr);
function duplicateZeros(a){
    let finalArr=[];
    for(let i=0;i<a.length;i++){
        console.log(finalArr.length,a.length);
        if(finalArr.length<a.length){
        if(a[i]===0){
            finalArr.push(a[i],0);
           
        } else{
            finalArr.push(a[i]);
        }
        }
    }
     console.log(finalArr);
}


Alternative:

// Input: arr = [1,0,2,3,0,4,5,0]
// Output: [1,0,0,2,3,0,0,4]
const arr = [1,0,2,3,0,4,5,0];
duplicateZeros(arr);
function duplicateZeros(a){
    for(let i=0;i<a.length;i++){
      if(a[i]==0){
          //array.splice(index, howmany, item1, ....., itemX)
          a.splice(i,0,0);
          a.pop();
          i++;//We will get the element added so we have to increment the index
      }
    }
    
    
}

-----------------------------------------------------------------------

 async function name(){
    console.log(1);
     await Promise.resolve();
    console.log(2);
}

 name();
console.log(3);

//O/p: 1 3 2

---------------------------------------------------------------------------

This context:

obj-->method---->this context inside method will point to obj

const obj={
    name:"kkr",
    displayName(){
        console.log(this);
        console.log(this.name);
    }
}

obj.displayName();
//O/p:
//{ name: 'kkr', displayName: [Function: displayName] }
//kkr

-------
function fn(){
    console.log(this);//Window Object in non strict mode
}
fn();

-------
"use strict"

function fn(){
    console.log(this);//Undefined in strict mode
}
fn();

-----------

obj--->Normal--->Arrow
this inside arrow fn will point to the normal fn(lexical parent)

obj--->parentNormal---->childNormal
this inside childNormal will point to window Object

ParentArrow---->ChildArrow
this in childArrow will point to Window Object

obj---->innerObj---->Normal
this in normalfn will point to innerObj


----------------------------------------------------------------------------------------------
Redux Middlewares---- Functions that provide a third point extension point between dispatching an action and the moment it reaches the Reducer function.
Uses:
Handling Asynchronous actions, side effects or modify actions before they reach reducer
Intercepting actions
useful for logging, transformations, cancelling actions

const mymiddleWare=(store)=>(next)=>(action)=>{
next(action);
}
//Returns the fulfilled or error status.


configuring middleware in the store:
const store=createStore(rootReducer,applyMiddleware(mymiddleWare,thunkMiddleware));
redux-thunk----Handle asynchronous actions using functions
redux-saga----> Uses generator functions to manage side-effects

-------------------------------------------------------------------------------------------------------------------------------

Mock Api calls 
