[1, 2, 3].includes(3, -1); // true
includes(searchElem, fromIndex)

This scenario is validated like -array.length<=fromIndex<0, then we hae to do fromIndex+array.length(-1+3=2).So we need to consider index from back of array and once we reach that index from back, we start our search.
EX: 2nd index from back of array will be 3->0 index, 2->1st index, 1->2nd index, so search will start from 1(2nd index from back)

2. If fromIndex is greater than or equal to the length of the array, false is returned. The array will not be searched.
const arr = ["a", "b", "c"];

arr.includes("c", 3); // false
arr.includes("c", 100); // false

3. If fromIndex is negative, the computed index is calculated to be used as a position in the array at which to begin searching for searchElement. If the computed index is less than or equal to 0, the entire array will be searched.
// array length is 3
// fromIndex is -100
// computed index is 3 + (-100) = -97

const arr = ["a", "b", "c"];

arr.includes("a", -100); // true
arr.includes("b", -100); // true
arr.includes("c", -100); // true
arr.includes("a", -2); // false

4.You can search for undefined in a sparse array and get true.
console.log([1, , 3].includes(undefined)); // true

5.On Non-Array Objects
The includes() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.
const arrayLike = {
  length: 3,
  0: 2,
  1: 3,
  2: 4,
  3: 1, // ignored by includes() since length is 3
};
console.log(Array.prototype.includes.call(arrayLike, 2));
// true
console.log(Array.prototype.includes.call(arrayLike, 1));
// false
